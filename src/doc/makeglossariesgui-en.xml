<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE manual SYSTEM "makeglossariesgui.dtd">
<manual fontenc="T1">
  <preamble>
    <!-- Document Info -->
    <title>User Manual for <dict tag="appname"/> version 
      <dict tag="appversion" /></title>
    <author>Nicola L. C. Talbot<br/><url www="www.dickimaw-books.com" /></author>
<!--
    <author>Another Author<br />Affliation or URL</author>
    <author>Translated by Some One<br />Affliation or URL</author>
-->
    <date><dict tag="appdate" /></date>
    <!-- Define Acronyms -->
    <newacro short="GUI" long="graphical user interface" tag="gui" />
    <!-- Define Terms. If a description is included it's a glossary
         term otherwise it goes in the index -->
    <newterm tag="makeglossaries" text="makeglossaries" 
      description="a Perl script provided with the glossaries package
      which runs either makeindex or xindy, depending on the
      settings in the .aux file"/>
    <newterm tag="makeglossarieslite" text="makeglossaries-lite.lua" 
      description="a Lua script provided with the glossaries package
      as a light-weight alternative to makeglossaries"/>
    <newterm tag="makeindex" text="makeindex" 
      description="an indexing application"/>
    <newterm tag="xindy" text="xindy" 
      description="an indexing application written in Perl"/>
  </preamble>
  <document>
   <node tag="introduction" type="chapter" title="Introduction">
     <p>
     The <LaTeX /> <sty>glossaries</sty> package has three methods
     of generating a glossary (list of abbreviations, terms or symbols):
     directly using <LaTeX />, using <term tag="makeindex"/> or using 
     <term tag="xindy"/>.  The first option requires two <LaTeX/> runs
     (as with cross-references), the last two options requires a <LaTeX/> 
     run followed by running the indexing application (<term tag="makeindex"/>
     or <term tag="xindy"/>), followed by another <LaTeX/> run. 
     </p>
     <p>
     The <sty>glossaries</sty> package provides a Perl script called 
     <term tag="makeglossaries"/> that's intended to simplify this step
     for options 2 and 3. However, sometimes things can go wrong and users
     may not be able to work out why. The <term tag="makeglossaries"/> 
     script tries to diagnose problems, but not everyone wants to install 
     Perl for some reason (which is a shame, as there are some useful 
     <TeX/>-related Perl scripts, including <term tag="xindy"/>). 
     The <sty>glossaries</sty> package also provides a light-weight Lua 
     alternative, <term tag="makeglossarieslite"/>, but that doesn't provide 
     any diagnostics. <app/> is a Java application that (when run in batch 
     mode) can be used instead of <term tag="makeglossaries"/> or 
     <term tag="makeglossarieslite"/>, although the overhead of using Java 
     is naturally higher than Perl or Lua. However <app/>'s primary
     purpose is a <acr tag="gui"/> tool for determining what's gone wrong
     when the glossary doesn't appear or is incomplete.
     </p>
     <p>
     Since <app/> is written in Java, you'll need the Java Runtime Environment 
     installed.
     </p>
     <p>The <app/> application runs in <acr tag="gui" /> mode by default, but 
     can be run in batch mode using the <opt tag="batch"/> command line option.
     Command line invocation:
     </p>
     <p align="center">
      <tt>makeglossariesgui</tt> [<meta>options</meta>] [<meta>filename</meta>]
     </p>
     <p noindent="true">
     The <meta>filename</meta> must be supplied when run in batch mode, but
     is optional in <acr tag="gui"/> mode. The <meta>filename</meta> should
     be the auxiliary file produced by the <LaTeX/> run, but may also be
     the <tt>.tex</tt> file if it has the same basename as the auxiliary file.
     The <tt>.aux</tt> extension may be omitted. Unlike 
     <term tag="makeglossaries"/> and <term tag="makeglossarieslite"/>, 
     <meta>filename</meta> may include the directory path.
     </p>
     <p>
     Available options:
     <dl>
       <dt><opt tag="batch"/> (or <tt>-b</tt>)</dt>
       <dd>
       Invoke <app/> in batch mode (<meta>filename</meta> must be supplied).
       Note that the extra checks that parse the log file aren't performed
       in batch mode.
       </dd>
       <dt><opt tag="gui"/></dt>
       <dd>
       Invoke <app/> in <acr tag="gui"/> mode (default).
       </dd>
       <dt><opt tag="quiet"/></dt>
       <dd>Suppress (non-error) messages that would otherwise have been written
       to STDOUT.</dd>
       <dt><opt tag="dry-run"/> (or <tt>-n</tt>)</dt>
       <dd>Dry run mode (don't run the indexing application).</dd>
       <dt><opt tag="nodry-run"/></dt>
       <dd>Not dry run mode (default).</dd>
       <dt><opt tag="debug"/></dt>
       <dd>Print debug messages to STDOUT.</dd>
       <dt><opt tag="version"/> (or <tt>-v</tt>)</dt>
       <dd>Print the version details to STDOUT and exit.</dd>
       <dt><opt tag="help"/> (or <tt>-h</tt>)</dt>
       <dd>Print a brief summary of available options to STDOUT and exit.</dd>
     </dl>
     </p>
     <p>
     When run in batch mode, <app/> behaves much like 
     <term tag="makeglossaries"/>. It reads the auxiliary file to determine
     whether to use <term tag="makeindex"/> or <term tag="xindy"/> and
     what options to pass to them. The <acr tag="gui"/> <ref text="settings" tag="properties"/>
     will be honoured.
     </p>
   </node>
   <node type="chapter" tag="main" title="Main Panel">
   <p>
   A file can be loaded from the command line invocation 
   (see <ref tag="introduction"/>) or in the <acr tag="gui"/> using the 
   <menu tag="file.open"/> menu item. You can also use the load file button
   on the toolbar or drag and drop the file onto the main window. The
   input file should be the <tt>.aux</tt> file created by <LaTeX/>, but if
   you try to load the main document <tt>.tex</tt> file, <app/> will assume 
   you meant the associated <tt>.aux</tt> file.
   </p>
   <example>
   <p>
   Suppose you have the following document (called, say, <tt>basic-sample.tex</tt>):
   </p>
   <pre>
\documentclass{article}

\usepackage{glossaries}

\makeglossaries

\newglossaryentry{sample}{name={sample},
 description={an example}}

\begin{document}
A \gls{sample} document.

\printglossaries

\end{document}
   </pre>
   <p>
   First run <LaTeX/> the usual way. This should create the auxiliary file
   <tt>basic-sample.aux</tt> as well as some other files including 
   <tt>basic-sample.glo</tt> and <tt>basic-sample.ist</tt>. Now load the auxiliary file
   (<tt>basic-sample.aux</tt>) into <app/>. (Since the main <tt>.tex</tt> file
   has the same basename as the <tt>.aux</tt> file, you can also use that, as
   mentioned above.)
   </p>
   <p>
   Once <app/> has successfully loaded the <tt>.aux</tt> file, it will run 
   <term tag="makeindex"/> on the associated <tt>.glo</tt> file (with the
   <tt>.ist</tt> file as the style).
   In this case, there are no problems with the document and the
   <tt>.tex</tt> file is now ready for another <LaTeX/> run. The general
   information panel (<ref tag="basicsample"/>) shows a summary of 
   document glossaries. In this case, there's only one glossary (the
   <tt>main</tt> one). If you edit the document source code (<tt>.tex</tt> file)
   you can use the <menu tag="file.reload"/> menu item to reload the updated
   <tt>.aux</tt> file in <app/>.
   </p>
   <p>
   <float type="figure" tag="basicsample"
     caption="General Information Panel (Basic Sample)" pos="htbp">
   <image src="images/basic-sample.png" scale="0.8"
          alt="image of general information panel"/>
   </float>
   </p>
   <p>
   In this example, only one entry has been indexed in the <tt>main</tt> glossary. You
   can find out more information by clicking on the <dq>Details</dq>
   link, which will open the window shown in <ref tag="basicsampledetails"/>.
   </p>
   <p>
   <float type="figure" tag="basicsampledetails"
     caption="Entry Details (Basic Sample)" pos="htbp">
   <image src="images/basic-sample-details.png" 
          alt="image of details window"/>
   </float>
   </p>
   <p>
   Since only one entry has been used, there's only one row. The first
   column lists the entry's label, the second column lists the entry's sort
   field and the third column shows the number of times that entry was indexed
   in the document. If you have a long list of entries, you can use the search
   box to find an entry according to its <em>label</em>. Regular
   expressions are permitted.
   </p>
   </example>
   <p>
   If you have defined an entry in your document, but it's not listed in
   the details window for the relevant glossary, then it hasn't been indexed
   in your document. Remember that the commands described in section<nbsp/>9
   (Using Glossary Terms Without Links) of the <sty>glossaries</sty> manual
   don't index the terms. These essentially are all the commands in the
   form <backslash/><tt>glsentry</tt><meta>field</meta> or
   <backslash/><tt>glossentryname</tt><meta>field</meta>, such as
   <cs tag="glsentrytext"/> or <cs tag="glsentrylong"/>
   or <cs tag="glossentryname"/>, and their case-changing variants. 
   Also <cs tag="glsentrytitlecase"/> and
   <cs tag="glshyperlink"/>.
   </p>
   <p>
   If you're using the <sty>glossaries-extra</sty> package, remember that
   the <tt>noindex</tt> option will suppress indexing.
   </p>
   <example>
   <p>
   Now let's consider the following document (called, say, 
   <tt>missing-sort.tex</tt>):
   </p>
   <pre>
\documentclass{article}

\usepackage[utf8]{inputenc}
\usepackage[xindy]{glossaries}

\makeglossaries

\newglossaryentry{S}{name={\S},
 description={section symbol}}

\newglossaryentry{alpha}{name={\ensuremath{\alpha}},
 description={alpha}}

\newglossaryentry{beta}{name={$\beta$},text={\beta},
 description={beta}}

\begin{document}
Test: \gls{S}, $\gls{alpha}$, $\gls{beta}$.

\printglossaries

\end{document}
   </pre>
   <p>
   As before, run <LaTeX/> as usual on this document. Since the <tt>xindy</tt>
   package option has been used, this will create a <tt>.xdy</tt> file
   instead of a <tt>.ist</tt> file and the <tt>.glo</tt>
   file is now in <term tag="xindy"/>'s format. There are, however, problems
   with this document. The <sty>glossaries</sty> manual advises using the
   <tt>sort</tt> key for entries that contain special characters or commands
   in the entry's name. This document hasn't followed that advice, and
   xindy will complain. The <tt>S</tt> entry just causes a warning:
   </p>
<blockquote>
Would replace complete index key with empty string, ignoring
</blockquote>
   <p noindent="true">
   and the <tt>S</tt> entry is ignored. The <tt>alpha</tt> and <tt>beta</tt>
   entries cause an error:
   </p>
<blockquote>
index 0 should be less than the length of the string
</blockquote>
   <p noindent="true">
   Again the entries are ignored, but the message is fairly cryptic.
   If we load the auxiliary file (<tt>missing-sort.aux</tt>) into
   <app/>, these problems are detected, and the following error message is 
   displayed:
   </p>
<blockquote>
Xindy has ignored one or more entries with empty sort strings.
Xindy failed with exit code 1.
</blockquote>
   <p>
   Once this error message has been dismissed, the <dq>Diagnostics</dq> tab
   should automatically be selected (see <ref tag="missingsortdiagnostics"/>).
   This identifies the problem entries and recommends a solution, in this case, 
   add the <tt>sort</tt> key to the entry definition. The actual warning and
   error message reported by <term tag="xindy"/> are shown at the end.
   </p>
   <p>
   <float type="figure" tag="missingsortdiagnostics"
     caption="Diagnostics Panel" pos="htbp">
   <image src="images/missing-sort-diagnostics.png" scale="0.8"
          alt="image of diagnostics panel"/>
   </float>
   </p>
   <p>
   (You can adjust the font size using the increase or decrease buttons, or 
   the <menu tag="settings.incsize"/> or <menu tag="settings.decsize"/> menu
   items.)
   </p>
   <p>
   In the <button tag="main.title"/> panel, the <dq>Details</dq>
   link can again be used to view the list of indexed entries,
   but now the problematic entries are shown in red (see 
   <ref tag="missingsortdetails"/>).
   </p>
   <p>
   <float type="figure" tag="missingsortdetails"
     caption="Entry Details (Problematic Entries)" pos="htbp">
   <image src="images/missing-sort-details.png" 
          alt="image of details window with rows displayed in red"/>
   </float>
   </p>
   </example>
   <p>
   <app/> actually performs more problem checking than 
   <term tag="makeglossaries"/> as it also tries to parse
   the log file for certain messages (but only in <acr tag="gui"/> mode).
   This is illustrated in the next example, which won't generate any error 
   messages from <term tag="makeglossaries"/>.
   </p>
   <example>
   <p>
   Spot what's wrong with the following document:
   </p>
<pre>
\documentclass{article}

\usepackage{glossaries}

\makeglossaries

\newglossaryentry{sample}{name={sample},
 description={an example}}

\begin{document}
A \gls{sample} document.

\printglossary[type=acronym]

\end{document}
</pre>
   <p>
   If you use the normal method of <LaTeX/>, 
   <term tag="makeglossaries"/>, <LaTeX/>, you won't get any
   error messages, but the glossary won't be displayed. Why not?
   If we switch from
   </p>
<pre>
\usepackage{glossaries}
</pre>
   <p noindent="true">
   to
   </p>
<pre>
\usepackage{glossaries-extra}
</pre>
   <p noindent="true">
   then we do finally get an error:
   </p>
<blockquote>
! Package glossaries-extra Error: Glossary type <sq>acronym</sq> doesn't exist.
</blockquote>
   <p>
   The <sty>glossaries-extra</sty> package is stricter than
   the base <sty>glossaries</sty> package. The problem here
   is that I've used <tt>type=acronym</tt>, but there's no
   glossary with that label. (I haven't used the <tt>acronym</tt>
   option.) If you're not using the extension package, this is
   harder to pick up, but <app/> will notify you of the problem.
   This example document will trigger the error
   </p>
<blockquote>
No glossary <sq>acronym</sq>.
</blockquote>
  <p noindent="false">
  and the diagnostics panel will show the message:
  </p>
<blockquote>
It looks as though you might have done something like 
<tt><cs tag="printglossary"/>[type=<marg>acronym</marg>]</tt>, but there's no 
<tt>acronym</tt> glossary.
</blockquote>
   <p>
   If you switch to the <dq>General Information</dq> panel,
   the labels for the glossaries defined in the document are
   listed next to <dq><dict tag="main.list"/></dq> so you
   can check the indicated type against it. In this example,
   the list has only the single label <dq>main</dq>.
   </p>
   </example>
   <p>
   Remember that you not only have to define your entries, but you also
   have to index them if you want them to appear in the glossary. The
   <sty>glossaries</sty> package provides many commands that index entries,
   the most commonly used one being <cs tag="gls"/>, which displays
   the text associated with the entry, indexes the entry,
   marks it as having been used and (if the <sty>hyperref</sty> package has
   been loaded) also creates a link to the definition in the glossary.
   Other commands provide variations, such as displaying different text
   or not changing the <dq>first use flag</dq>. In particular, the
   <cs tag="glsadd"/> command only indexes the entry without displaying any
   text.
   </p>
   <example>
   <p>
   In the sample document below, I've defined an entry but it hasn't been 
   indexed anywhere in the document.
   </p>
<pre>
\documentclass{article}

\usepackage{glossaries}

\makeglossaries

\newglossaryentry{sample}{name={sample},
 description={an example}}

\begin{document}
A sample document.

\printglossaries

\end{document}
</pre>
   <p>
   My first step, as usual, is to run <LaTeX/> on this document, which will
   create the <tt>.aux</tt> file. Now if I try loading this file into <app/> 
   I get the error message:
   </p>
   <blockquote>
   No entries were found for glossary <sq>main</sq>.
   </blockquote>
   <p>
   The diagnostics panel shows the following message:
   </p>
   <blockquote>
There were no entries listed for the <tt>main</tt> glossary. Remember that you 
must index entries for them to appear in the glossary using the commands 
provided by the glossaries package. Entries that have been defined but not 
indexed won't be listed. If you don't want to use this glossary, 
add the <tt>nomain</tt> package option to your document. Check the following:
<ul>
<li>Have you used commands like <cs tag="gls"/> or <cs tag="glsadd"/> in the
document? (If you haven't, you need to add them.)</li>
<li>If you have used commands like <cs tag="glsadd"/> or <cs tag="glsaddall"/> 
in the preamble, have you remembered to put them <em>after</em> 
<cs tag="makeglossaries"/></li>
<li>If you have at least version 4.24 of the glossaries package, have you used the debug option? (That might provide some more information for me to analyse.)</li>
</ul>
   </blockquote>
   <p>
   (The sentence referencing <tt>nomain</tt> only appears if there are 
   no entries for the <tt>main</tt> glossary, but not for any other glossaries.)
   </p>
   </example>
   <p>
   Remember that if you use <cs tag="makenoidxglossaries"/>, you don't
   need <term tag="makeindex"/> or <term tag="xindy"/>.
   </p>
   <example>
   <p>
   Consider the following document:
<pre>
\documentclass{article}

\usepackage{glossaries}

\makenoidxglossaries

\newglossaryentry{sample}{name={sample},
 description={an example}}

\begin{document}
A \gls{sample} document.

\printnoidxglossaries

\end{document}
</pre>
   </p>
   <p>
   If I load the <tt>.aux</tt> file for this document into <app/>, I get
   the following message in the diagnostics panel:
   </p>
   <blockquote>
It seems you've used <cs tag="makenoidxglossaries"/>, which means you don't 
need xindy or makeindex, you just need a second LaTeX run to get the glossary 
up to date.
   </blockquote>
   <p>
   Note that <app/> still provides some limited diagnostics even when
   <cs tag="makenoidxglossaries"/> has been used. To illustrate this, if we
   modify the above sample document slightly, introducing an error:
   </p>
<pre>
\documentclass{article}

\usepackage{glossaries}

\makenoidxglossaries

\newglossaryentry{sample}{name={sample},
 description={an example}}

\begin{document}
A \gls{sample} document.

\printnoidxglossary[type=acronym]

\end{document}
</pre>
   <p>
   This provides some additional information in the diagnostics panel:
   </p>
   <blockquote>
<p>
Package glossaries Warning: Empty glossary for 
<tt><cs tag="printnoidxglossary"/>[type=<marg>acronym</marg>]</tt> Rerun may be 
required (or you may have forgotten to use commands like <cs tag="gls"/>) on input 
line 13.
</p>
<p>
It looks as though you might have done something like 
<tt><cs tag="printnoidxglossary"/>[type=<marg>acronym</marg>]</tt>, but there's no
<tt>acronym</tt> glossary.
</p>
   </blockquote>
   <p>
   So <app/> picks up the error.
   </p>
   </example>
   <p>
   Note that <app/> also looks for warnings from the <sty>glossaries</sty>
   package, so if you are encountering any problems, make sure you
   haven't suppressed the warnings with the <tt>nowarn</tt> package option.
   </p>
   <example>
   <p>
   In this example I've omitted <cs tag="printglossary"/> from the document:
   </p>
<pre>
\documentclass{article}

\usepackage{glossaries}

\makeglossaries

\newglossaryentry{sample}{name={sample},
 description={an example}}

\begin{document}
A \gls{sample} document.

\end{document}
</pre>
   <p>
   This doesn't cause any problems for <term tag="makeindex"/> as all
   the associated files have been created correctly. The document simply
   doesn't load the file generated by <term tag="makeindex"/> as there's
   no <cs tag="printglossary"/> (or <cs tag="printglossaries"/>). However
   the <sty>glossaries</sty> package does generate a warning, and this
   warning is picked up by <app/> and displayed in the diagnostics panel:
   </p>
   <blockquote>
Package glossaries Warning: No <cs tag="printglossary"/> or 
<cs tag="printglossaries"/> found. (Remove <cs tag="makeglossaries"/>
if you don't want any glossaries.) This document will not have a glossary.
   </blockquote>
   <p>
   If you suppress these warnings then <app/> can't help.
   </p>
   </example>
   </node>
   <node type="chapter" tag="properties" title="Settings" >
   <p>
   The application settings can be adjusted through the <menu tag="settings"/>
   menu. The
   <menu tag="settings.editproperties"/> menu item (or toolbar button) will 
   open the 
   <button tag="properties.title"/> dialog window.
   This has four tabs: <button tag="properties.start_dir"/>, 
   <button tag="properties.diagnostics"/>,
   <button tag="properties.applications"/> and 
   <button tag="properties.gui"/>.
   </p>
   </node>
   <node type="section" tag="startdirtab" title="Start Up Directory">
   <p>
   <float type="figure" tag="propertiesdialog-startdir"
     caption="Properties Dialog (Start Up Directory)" pos="htbp">
   <image src="images/properties-startdir.png"
    alt="image of properties dialog with start up tab selected"
    scale="0.8"/>
   </float>
   </p>
   <p>
   The <button tag="properties.start_dir"/> 
   (<ref tag="propertiesdialog-startdir"/>) tab allows you to
   select the directory to use on start up. This is the 
   directory the file chooser will be set to initially.
   </p>
   </node>
   <node type="section" tag="diagnosticstab" title="Diagnostic Settings">
   <p>
   <float type="figure" tag="propertiesdialog-diagnostics"
     caption="Properties Dialog (Diagnostics)" pos="htbp">
   <image src="images/properties-diagnostics.png"
    alt="image of properties dialog with diagnostics tab selected"
    scale="0.8"/>
   </float>
   </p>
   <p>
   <app/> will try to determine if you have defined any 
   entries within the <env tag="document"/> environment.
   Although the <sty>glossaries</sty> package allows 
   document definitions, the manual encourages defining
   entries in the preamble, see section<nbsp/>4.10 of
   the <sty>glossaries</sty> user manual (<dq>Drawbacks
   With Defining Entries in the Document Environment</dq>).
   If you want to skip this check, deselect the
   <button tag="properties.docdefcheck"/> check box.
   </p>
   <p>
   There's also a check to see if the <sty>glossaries</sty>
   package has complained about missing language modules.
   Not all languages are supported and, for those languages
   that are supported, the appropriate module must be installed
   in addition to installing the <sty>glossaries</sty> package.
   If the required language support is missing, the glossary
   files can still be built, you'll just have to manually
   change the fixed text for the title following the instructions
   in section<nbsp/>1.3 (<dq>Multi-Lingual Support</dq>)
   of the <sty>glossaries</sty> user manual. If you want to
   skip this check, deselect the
   <button tag="properties.langcheck"/> check box.
   </p>
   </node>
   <node type="section" tag="applicationstab" title="Indexing Applications">
   <p>
   <float type="figure" tag="propertiesdialog-applications"
     caption="Properties Dialog (Applications)" pos="htbp">
   <image src="images/properties-applications.png"
    alt="image of properties dialog with applications tab selected"
    scale="0.8"/>
   </float>
   </p>
   <p>
   The <button tag="properties.applications"/> tab lists the paths to
   <term tag="makeindex"/> and <term tag="xindy"/>. <app/> will attempt
   to locate them on your system's path, but if they can't be detected,
   you'll need to specify the correct location. You can omit the location
   for an unrequired application.
   </p>
   <p>
   <app/> will try to determine the language and input encoding from the
   <tt>.aux</tt> file to pass to <term tag="xindy"/>, but you can override 
   this if you want to. Make sure that the <button tag="properties.override"/> 
   check box is selected, and change the language and encoding as appropriate.
   Note that the batch mode will also use these settings, although they can
   only be adjusted in the <cs tag="gui"/> mode.
   </p>
   </node>
   <node type="section" tag="guitab" title="GUI Preferences">
   <p>
   <float type="figure" tag="propertiesdialog-gui-metal"
     caption="GUI Preferences (Metal Look and Feel)" pos="htbp">
   <image src="images/properties-gui-metal.png"
    alt="image of properties dialog with GUI tab selected (Metal Look and Feel)"
    scale="0.8"/>
   </float>
   </p>
   <p>
   The font used in the 
   <dq>General Information</dq> and <dq>Diagnostics</dq> panels can be 
   set in the <button tag="properties.gui"/> tab. In addition to 
   adjusting the font size through the
    <menu tag="settings.incsize"/> or <menu tag="settings.decsize"/> 
   menu items, you can also set the required font size in this panel. 
   </p>
   <p>
   The Java <dq>Look And Feel</dq> can be set by selecting the required
   option in the <button tag="properties.look_and_feel"/> drop-down menu.
   Note that a restart is required as the Look and Feel is set on start up.
   The title bar appearance is governed by your usual operating system
   preference. The Look and Feel changes the way the window elements are
   displayed.
   <ref tag="propertiesdialog-gui-metal"/> shows the <dq>Metal</dq> 
   Look and Feel.
   <ref tag="propertiesdialog-gui-nimbus"/> shows the <dq>Nimbus</dq> 
   Look and Feel.
   <ref tag="propertiesdialog-gui-cde"/> shows the <dq>CDE/Motif</dq> 
   Look and Feel.
   <ref tag="propertiesdialog-gui-gtk"/> shows the <dq>GTK+</dq> 
   Look and Feel.
   You may not have all these options on your system or you may have
   additional options, depending on your Java installation.
   </p>
   <p>
   <float type="figure" tag="propertiesdialog-gui-nimbus"
     caption="GUI Preferences (Nimbus Look and Feel)" pos="htbp">
   <image src="images/properties-gui-nimbus.png"
    alt="image of properties dialog with GUI tab selected (Nimbus Look and Feel)"
    scale="0.8"/>
   </float>
   <float type="figure" tag="propertiesdialog-gui-cde"
     caption="GUI Preferences (CDE/Motif Look and Feel)" pos="htbp">
   <image src="images/properties-gui-cde.png"
    alt="image of properties dialog with GUI tab selected (Cde/motif Look and Feel)"
    scale="0.8"/>
   </float>
   <float type="figure" tag="propertiesdialog-gui-gtk"
     caption="GUI Preferences (GTK+ Look and Feel)" pos="htbp">
   <image src="images/properties-gui-gtk.png"
    alt="image of properties dialog with GUI tab selected (GTK+ Look and Feel)"
    scale="0.8"/>
   </float>
   </p>
   </node>
   <node type="chapter" tag="licence" title="Licence" >
   <p>
   <app/> is licensed under the terms of the GNU General Public License.
   <app/> depends on the following third party libraries whose jar files are
   in the <tt>lib</tt> directory: Java Help 
   (<url www="https://javahelp.java.net/"/>) and
   the Java Look and Feel Graphics Repository (<url www="http://www.oracle.com/technetwork/java/index-138612.html"/>).
   </p>
     <verbtabinput src="LICENSE"/>
   </node>
   <printglossary />
   <printindex />
  </document>
</manual>
